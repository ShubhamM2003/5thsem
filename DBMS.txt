DBMS**

User
Defining schema for applications.
2. Creating tables, Renaming tables, Data constraints (Primary key, Foreign key, Not Null), Data
insertion into a table.
3. Grouping data, aggregate functions, Oracle functions (mathematical, character functions).
4. Sub-queries, Set operations, Joins.
5. Creation of databases, writing SQL and PL/SQL queries to retrieve information from the
databases.
6. Assignment on Triggers & Cursors.
7. Normal Forms: First, Second, Third and Boyce Codd Normal Forms.
8. Assignment in Design and Implementation of Database systems or packages for applications such
as office automation, hotel management, hospital management.
9. Deployment of Forms, Reports Normalization, Query Processing Algorithms in the above
application project.
10. Large objects â€“ CLOB, NCLOB, BLOB and BFILE.
11. Distributed data base Management, creating web-page interfaces for database applications using
servlet.

form the above topics extract coding part and return me the topics

1.Defining Schema and Creating Tables:



-- Creating tables with primary key, foreign key, and not null constraint
CREATE TABLE departments (
    department_id INT PRIMARY KEY,
    department_name VARCHAR(50) NOT NULL
);

CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    department_id INT,
    FOREIGN KEY (department_id) REFERENCES departments(department_id)
);


2.Data Insertion into a Table:

-- Inserting data into the departments table
INSERT INTO departments (department_id, department_name)
VALUES (101, 'HR');

-- Inserting data into the employees table
INSERT INTO employees (employee_id, first_name, last_name, department_id)
VALUES (1, 'John', 'Doe', 101);

3.Grouping Data, Aggregate Functions, Oracle Functions:

-- Grouping data and using aggregate functions
SELECT department_id, COUNT(*) as employee_count
FROM employees
GROUP BY department_id;

-- Oracle functions (e.g., mathematical and character functions)
SELECT ROUND(salary, 2) AS rounded_salary, SUBSTR(first_name, 1, 3) AS short_name
FROM employees;


4.Sub-queries, Set Operations, Joins:

-- Sub-query example
SELECT employee_id, first_name
FROM employees
WHERE department_id IN (SELECT department_id FROM departments WHERE department_name = 'HR');

-- Set operation example (UNION)
SELECT employee_id, first_name FROM employees
UNION
SELECT employee_id, first_name FROM other_table;

-- Join example (INNER JOIN)
SELECT employees.employee_id, employees.first_name, departments.department_name
FROM employees
INNER JOIN departments ON employees.department_id = departments.department_id;

5.Triggers & Cursors (PL/SQL):

-- Trigger example
CREATE OR REPLACE TRIGGER before_insert_employee
BEFORE INSERT ON employees
FOR EACH ROW
BEGIN
    :NEW.creation_date := SYSDATE;
END;

-- Cursor example
DECLARE
    CURSOR employee_cursor IS SELECT employee_id, first_name FROM employees;
    emp_rec employee_cursor%ROWTYPE;
BEGIN
    OPEN employee_cursor;
    LOOP
        FETCH employee_cursor INTO emp_rec;
        EXIT WHEN employee_cursor%NOTFOUND;
        -- Process the data
    END LOOP;
    CLOSE employee_cursor;
END;



inner join bhase


CREATE TABLE employees (employee_id INT, employee_name VARCHAR2(50), department_id INT);

INSERT INTO employees VALUES (1, 'John', 101);

INSERT INTO employees VALUES (2, 'Alice', 102);

INSERT INTO employees VALUES (3, 'Bob', 101);

INSERT INTO employees VALUES (4, Charlie', 103);

DESC EMPLOYEES

SELECT FROM EMPLOYEES

CREATE TABLE departments (department_id INT, department_name VARCHAR2(50));

INSERT INTO departments VALUES (101, HR'); INSERT INTO departments VALUES (102, 'IT');

INSERT INTO departments VALUES (103, 'Finance');

SELECT * FROM employees JOIN departments ON employees.department_id = departments.department_id;

SELECT * FROM employees JOIN departments ON employees.department_id departments.department_id AND employees.employee_id > 2

SELECT *FROM employees NATURAL JOIN departments SELECT FROM employees CROSS JOIN departments


trigger code........ 


-- Creating a sample table
CREATE TABLE my_table (
    id INT PRIMARY KEY,
    name VARCHAR(255),
    created_at TIMESTAMP
);

-- Creating a "before insert" trigger
DELIMITER //
CREATE TRIGGER before_insert_trigger
BEFORE INSERT ON my_table
FOR EACH ROW
BEGIN
    -- Setting the created_at column to the current timestamp
    SET NEW.created_at = NOW();
END;
//
DELIMITER ;


primary key....... 



CREATE TABLE your_table_name (
    id INT PRIMARY KEY,
    other_column1 VARCHAR(255),
    other_column2 INT,
    -- Add more columns as needed
);


create.... 


CREATE TABLE your_table_name (
    id INT PRIMARY KEY,
    column1 VARCHAR(255),
    column2 INT,
    -- Add more columns as needed
);




rename


-- Assuming you want to rename column1 to new_column1
ALTER TABLE your_table_name
CHANGE COLUMN column1 new_column1 VARCHAR(255);




delete


-- Assuming you want to delete column1
ALTER TABLE your_table_name
DROP COLUMN column1;


modify


-- Assuming you want to change the data type of column2 to BIGINT
ALTER TABLE your_table_name
MODIFY COLUMN column2 BIGINT;


ading


ALTER TABLE your_table_name
ADD COLUMN new_column3 DATE;


foreign key.... 

-- Creating the 'customers' table
CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(255),
    -- Add more columns as needed
);

-- Creating the 'orders' table with a foreign key constraint
CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    order_date DATE,
    total_amount DECIMAL(10, 2),
    customer_id INT,
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);


group by.... 

SELECT category, SUM(amount) as total_amount
FROM sales
GROUP BY category;



joins..... 

SELECT 
    employees.employee_id,
    employees.employee_name,
    employees.department_id,
    departments.department_name
FROM 
    employees
INNER JOIN 
    departments ON employees.department_id = departments.department_id

UNION

SELECT 
    employees.employee_id,
    employees.employee_name,
    employees.department_id,
    departments.department_name
FROM 
    employees
LEFT JOIN 
    departments ON employees.department_id = departments.department_id

UNION

SELECT 
    employees.employee_id,
    employees.employee_name,
    employees.department_id,
    departments.department_name
FROM 
    employees
RIGHT JOIN 
    departments ON employees.department_id = departments.department_id

UNION

SELECT 
    employees.employee_id,
    employees.employee_name,
    employees.department_id,
    departments.department_name
FROM 
    employees
FULL JOIN 
    departments ON employees.department_id = departments.department_id;


coursor..... 

-- Declare variables
DECLARE @EmployeeName VARCHAR(255)
DECLARE @EmployeeSalary DECIMAL(10, 2)

-- Declare and set up the cursor
DECLARE employee_cursor CURSOR FOR
SELECT EmployeeName, Salary FROM EmployeeTable

-- Open the cursor
OPEN employee_cursor

-- Fetch the first row into the variables
FETCH NEXT FROM employee_cursor INTO @EmployeeName, @EmployeeSalary

-- Loop through the result set
WHILE @@FETCH_STATUS = 0
BEGIN
    -- Process the current row (replace with your logic)
    PRINT 'Employee: ' + @EmployeeName + ', Salary: ' + CAST(@EmployeeSalary AS VARCHAR)

    -- Fetch the next row
    FETCH NEXT FROM employee_cursor INTO @EmployeeName, @EmployeeSalary
END

-- Close and deallocate the cursor
CLOSE employee_cursor
DEALLOCATE employee_cursor


