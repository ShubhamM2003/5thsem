DBMS**

User
Defining schema for applications.
2. Creating tables, Renaming tables, Data constraints (Primary key, Foreign key, Not Null), Data
insertion into a table.
3. Grouping data, aggregate functions, Oracle functions (mathematical, character functions).
4. Sub-queries, Set operations, Joins.
5. Creation of databases, writing SQL and PL/SQL queries to retrieve information from the
databases.
6. Assignment on Triggers & Cursors.
7. Normal Forms: First, Second, Third and Boyce Codd Normal Forms.
8. Assignment in Design and Implementation of Database systems or packages for applications such
as office automation, hotel management, hospital management.
9. Deployment of Forms, Reports Normalization, Query Processing Algorithms in the above
application project.
10. Large objects â€“ CLOB, NCLOB, BLOB and BFILE.
11. Distributed data base Management, creating web-page interfaces for database applications using
servlet.

form the above topics extract coding part and return me the topics

1.Defining Schema and Creating Tables:



-- Creating tables with primary key, foreign key, and not null constraint
CREATE TABLE departments (
    department_id INT PRIMARY KEY,
    department_name VARCHAR(50) NOT NULL
);

CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    department_id INT,
    FOREIGN KEY (department_id) REFERENCES departments(department_id)
);


2.Data Insertion into a Table:

-- Inserting data into the departments table
INSERT INTO departments (department_id, department_name)
VALUES (101, 'HR');

-- Inserting data into the employees table
INSERT INTO employees (employee_id, first_name, last_name, department_id)
VALUES (1, 'John', 'Doe', 101);

3.Grouping Data, Aggregate Functions, Oracle Functions:

-- Grouping data and using aggregate functions
SELECT department_id, COUNT(*) as employee_count
FROM employees
GROUP BY department_id;

-- Oracle functions (e.g., mathematical and character functions)
SELECT ROUND(salary, 2) AS rounded_salary, SUBSTR(first_name, 1, 3) AS short_name
FROM employees;


4.Sub-queries, Set Operations, Joins:

-- Sub-query example
SELECT employee_id, first_name
FROM employees
WHERE department_id IN (SELECT department_id FROM departments WHERE department_name = 'HR');

-- Set operation example (UNION)
SELECT employee_id, first_name FROM employees
UNION
SELECT employee_id, first_name FROM other_table;

-- Join example (INNER JOIN)
SELECT employees.employee_id, employees.first_name, departments.department_name
FROM employees
INNER JOIN departments ON employees.department_id = departments.department_id;

5.Triggers & Cursors (PL/SQL):

-- Trigger example
CREATE OR REPLACE TRIGGER before_insert_employee
BEFORE INSERT ON employees
FOR EACH ROW
BEGIN
    :NEW.creation_date := SYSDATE;
END;

-- Cursor example
DECLARE
    CURSOR employee_cursor IS SELECT employee_id, first_name FROM employees;
    emp_rec employee_cursor%ROWTYPE;
BEGIN
    OPEN employee_cursor;
    LOOP
        FETCH employee_cursor INTO emp_rec;
        EXIT WHEN employee_cursor%NOTFOUND;
        -- Process the data
    END LOOP;
    CLOSE employee_cursor;
END;


